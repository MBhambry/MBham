# implementation of card game - Memory

import simplegui
import random
turns = 0
# helper function to initialize globals
def new_game():
    global ListOfCards, exposed,openCard,clickCounter,turns
    ListOfCards = [i for i in range(8)] + [i for i in range(8)]
    random.shuffle(ListOfCards)
    exposed = [False for i in range(16)]
    openCard = []
    clickCounter = 0
    turns = 0
    
# define event handlers
def mouseclick(pos):
    # add game state logic here
    global clickCounter, turns
    if clickCounter == 0:
        openCard.append(pos[0] // 50)
        exposed[pos[0] // 50] = True
        clickCounter += 1
        turns = 1
    elif clickCounter == 1:
        if not (pos[0] // 50 in openCard):
            openCard.append(pos[0] // 50)
            clickCounter += 1
            exposed[pos[0] //50] = True
    else:
        if not (pos[0] //50 in openCard):
            if ListOfCards[openCard[-1]]!=ListOfCards[openCard[-2]]:
                     exposed[openCard[-1]] = False
                     exposed[openCard[-2]] = False
                     openCard.pop()
                     openCard.pop()
            clickCounter = 1
            turns += 1
            exposed[pos[0] //50] = True
            openCard.append(pos[0] // 50)
            
        
    
    
                        
# cards are logically 50x100 pixels in size    
def draw(canvas):
    label.set_text("Turns= "+ str(turns))
    for i in range(16):
       canvas.draw_line([50*(i%15+1),0], [50*(i%15+1),100], 2, "Green")
       if exposed[i]:
             canvas.draw_text(str(ListOfCards[i]), [15+50*i,70], 40, "White")
       
       


# create frame and add a button and labels
frame = simplegui.create_frame("Memory", 800, 100)
frame.add_button("Reset", new_game)
label = frame.add_label("Turns = 0")

# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()


# Always remember to review the grading rubric
